// --- START OF COMPLETE src/app/page.tsx ---
'use client';

import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import ChatInterface from '@/components/chat/ChatInterface';
import BulletEditor from '@/components/bullets/BulletEditor';
import OERPreview from '@/components/oer/OERPreview';
import RankSelector from '@/components/ui/RankSelector';
import { Card } from '@/components/ui/card';
import { isInAppBrowser, getInAppBrowserName } from '@/utils/browserDetection';
import { InAppBrowserWarning } from '@/components/debug/InAppBrowserWarning';
import { useRouter } from 'next/navigation';

import type { Bullet } from '@/types/Bullet';

export default function Home() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [activeTab, setActiveTab] = useState<'chat' | 'bullets' | 'oer'>('chat');
  const [bullets, setBullets] = useState<(Bullet & { id: string })[]>([]);
  const [rankCategory, setRankCategory] = useState<'Officer' | 'Enlisted'>('Officer');
  const [rank, setRank] = useState('O3'); // Default Officer rank
  const [isInApp, setIsInApp] = useState(false);
  const [browserName, setBrowserName] = useState('');

  // Check for in-app browser on mount and redirect if not authenticated
  useEffect(() => {
    const inApp = isInAppBrowser();
    setIsInApp(inApp);
    if (inApp) {
      setBrowserName(getInAppBrowserName());
    }
    
    // If not in app browser and not authenticated, redirect to sign-in
    if (!inApp && status === 'unauthenticated') {
      router.push('/auth/signin');
    }
  }, [status, router]);

  // Default ranks for when category changes
  // const _defaultOfficerRank = "O1"; // Example, adjust as needed
  // const _defaultEnlistedRank = "E4"; // Example, adjust as needed

  // Handler for Rank Category dropdown change
  const handleRankCategoryChange = (newCategory: string) => {
    // You might want to add validation inside
    if (newCategory === "Officer" || newCategory === "Enlisted") {
      setRankCategory(newCategory as 'Officer' | 'Enlisted');
    }
  };

  // Handler for Specific Rank dropdown change
  function handleRankChange(newRank: string) {
    setRank(newRank);
  }

  // Handler for when a new bullet is generated by ChatInterface
  // Enhance the handler in page.tsx
  const handleBulletGenerated = (newBullet: Bullet) => {
    console.log("page.tsx: handleBulletGenerated received new bullet:", newBullet);
    
    // Verify the bullet has all required fields
    if (!newBullet.id || !newBullet.competency || !newBullet.content) {
      console.error("page.tsx: Invalid bullet data received:", newBullet);
      return;
    }
    
    // Update the state with the new bullet, ensuring id is non-null
    setBullets(prevBullets => {
      const updatedBullets = [...prevBullets, { ...newBullet, id: newBullet.id! }];
      console.log("page.tsx: Updated bullets state:", updatedBullets);
      return updatedBullets;
    });
    
    // Switch to the Bullets tab
    setActiveTab('bullets');
    console.log("page.tsx: Switched to 'bullets' tab");
  };

  // Handler for when bullets are modified in BulletEditor
  const handleBulletsChanged = (updatedBullets: Bullet[]) => {
    setBullets(updatedBullets.map(bullet => ({ ...bullet, id: bullet.id! })));
  };

  // Helper to get the main evaluation title
  const getEvaluationTitle = () => {
    return rankCategory === 'Officer' ? 'Officer Evaluation Report' : 'Enlisted Evaluation Report';
  };

  // Helper to get the label for the preview tab
  const getPreviewTabLabel = () => {
    return rankCategory === 'Officer' ? 'OER Preview' : 'Evaluation Preview';
  };

  // Show in-app browser warning if detected
  if (isInApp) {
    return (
      <main className="min-h-screen p-4 md:p-8 bg-background text-foreground">
        <div className="mx-auto max-w-6xl">
          <h1 className="mb-6 text-center text-2xl font-bold md:text-3xl text-foreground">
            USCG {getEvaluationTitle()} Generator
          </h1>
          <InAppBrowserWarning browserName={browserName} />
        </div>
      </main>
    );
  }

  // Show loading state
  if (status === 'loading') {
    return (
      <main className="min-h-screen p-4 md:p-8 bg-background text-foreground">
        <div className="mx-auto max-w-6xl">
          <div className="flex items-center justify-center min-h-[400px]">
            <div className="text-lg text-muted-foreground">Loading...</div>
          </div>
        </div>
      </main>
    );
  }

  // Show sign-in loading if redirecting
  if (!session && !isInApp) {
    return (
      <main className="min-h-screen p-4 md:p-8 bg-background text-foreground">
        <div className="mx-auto max-w-6xl">
          <div className="flex items-center justify-center min-h-[400px]">
            <div className="text-lg text-muted-foreground">Redirecting to sign in...</div>
          </div>
        </div>
      </main>
    );
  }

  // Main authenticated app
  return (
    <main className="min-h-screen p-4 md:p-8 bg-background text-foreground"> {/* Ensure base theme colors */}
      <div className="mx-auto max-w-6xl">
        <h1 className="mb-6 text-center text-2xl font-bold md:text-3xl text-foreground">
          USCG {getEvaluationTitle()} Generator
        </h1>

        {/* Rank selector card */}
        <Card className="mb-6 p-4 md:p-6 bg-card text-card-foreground border border-ring shadow-sm">
          <RankSelector
            selectedRankCategory={rankCategory}
            selectedRank={rank}
            onRankCategoryChange={handleRankCategoryChange}
            onRankChange={handleRankChange}
            // Pass styling props if RankSelector accepts them for dark mode consistency
            // selectClassName="bg-input text-foreground dark:bg-muted dark:text-foreground"
            // labelClassName="text-card-foreground"
          />
        </Card>

        {/* Tab navigation */}
        <div className="mb-6">
          <div className="flex border-b border-border"> {/* Use theme border */}
            {(['chat', 'bullets', 'oer'] as const).map(tab => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`px-4 py-2 font-medium transition-colors ${
                  activeTab === tab
                    ? 'border-b-1 border-border text-ring' // Use theme primary
                    : 'text-muted-foreground hover:text-foreground' // Use theme muted/foreground
                }`}
              >
                {tab === 'chat'
                  ? 'Generate Bullets'
                  : tab === 'bullets'
                  ? 'Manage Bullets'
                  : getPreviewTabLabel()}
              </button>
            ))}
          </div>
        </div>

        {/* Main content card - uses bg-card */}
        <Card className="p-4 md:p-6 bg-card text-card-foreground border border-ring shadow-sm">
          {activeTab === 'chat' && (
            <ChatInterface
              onBulletGenerated={handleBulletGenerated} // Pass the correct handler
              rankCategory={rankCategory}
              rank={rank}
              // You can pass initialMessages to ChatInterface if needed
            />
          )}
          {activeTab === 'bullets' && (
            <BulletEditor
              initialBullets={bullets}
              onBulletsChanged={handleBulletsChanged}
            />
          )}
          {activeTab === 'oer' && (
            <OERPreview
              bullets={bullets}
              rankCategory={rankCategory}
              rank={rank}
            />
          )}
        </Card>

        <p className="mt-8 text-center text-sm text-muted-foreground">
          This application helps generate performance bullets and create {getEvaluationTitle()}s.
        </p>
      </div>

      {/* Speech-to-text hint component (if you have it) */}
      {/* <SpeechHint /> */}
    </main>
  );
}
// --- END OF COMPLETE src/app/page.tsx ---