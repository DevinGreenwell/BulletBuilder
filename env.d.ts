// Generated by Wrangler by running `wrangler types --env-interface CloudflareEnv env.d.ts`

interface CloudflareEnv {
	DB: D1Database;
	ASSETS: Fetcher;
}
// Add Web Speech API TypeScript definitions
interface SpeechRecognition extends EventTarget {
	continuous: boolean;
	interimResults: boolean;
	lang: string;
	maxAlternatives: number;
	onaudioend: (this: SpeechRecognition, ev: Event) => any;
	onaudiostart: (this: SpeechRecognition, ev: Event) => any;
	onend: (this: SpeechRecognition, ev: Event) => any;
	onerror: (this: SpeechRecognition, ev: SpeechRecognitionErrorEvent) => any;
	onnomatch: (this: SpeechRecognition, ev: SpeechRecognitionEvent) => any;
	onresult: (this: SpeechRecognition, ev: SpeechRecognitionEvent) => any;
	onsoundend: (this: SpeechRecognition, ev: Event) => any;
	onsoundstart: (this: SpeechRecognition, ev: Event) => any;
	onspeechend: (this: SpeechRecognition, ev: Event) => any;
	onspeechstart: (this: SpeechRecognition, ev: Event) => any;
	onstart: (this: SpeechRecognition, ev: Event) => any;
	start(): void;
	stop(): void;
	abort(): void;
  }
  
  interface SpeechRecognitionConstructor {
	new (): SpeechRecognition;
	prototype: SpeechRecognition;
  }
  
  interface SpeechRecognitionEvent extends Event {
	readonly resultIndex: number;
	readonly results: SpeechRecognitionResultList;
	readonly interpretation: any;
	readonly emma: Document | null;
  }
  
  interface SpeechRecognitionErrorEvent extends Event {
	readonly error: string;
	readonly message: string;
  }
  
  interface SpeechRecognitionResultList {
	readonly length: number;
	item(index: number): SpeechRecognitionResult;
	[index: number]: SpeechRecognitionResult;
  }
  
  interface SpeechRecognitionResult {
	readonly length: number;
	item(index: number): SpeechRecognitionAlternative;
	[index: number]: SpeechRecognitionAlternative;
	readonly isFinal: boolean;
  }
  
  interface SpeechRecognitionAlternative {
	readonly transcript: string;
	readonly confidence: number;
  }
  
  declare global {
	interface Window {
	  SpeechRecognition: SpeechRecognitionConstructor;
	  webkitSpeechRecognition: SpeechRecognitionConstructor;
	}
  }
  
  export {};